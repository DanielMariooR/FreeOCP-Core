// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import db "gitlab.informatika.org/andrc1613/if3250_2022_08_freeocp/models/db"
import mock "github.com/stretchr/testify/mock"
import models "gitlab.informatika.org/andrc1613/if3250_2022_08_freeocp/models"
import pagination "gitlab.informatika.org/andrc1613/if3250_2022_08_freeocp/models/pagination"
import sqlx "github.com/jmoiron/sqlx"

// CourseRepository is an autogenerated mock type for the CourseRepository type
type CourseRepository struct {
	mock.Mock
}

// CheckIsProgressLogged provides a mock function with given fields: ctx, _a1, userID, materialID
func (_m *CourseRepository) CheckIsProgressLogged(ctx context.Context, _a1 *sqlx.DB, userID string, materialID string) (bool, error) {
	ret := _m.Called(ctx, _a1, userID, materialID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string, string) bool); ok {
		r0 = rf(ctx, _a1, userID, materialID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, string, string) error); ok {
		r1 = rf(ctx, _a1, userID, materialID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompletedCourseByUserID provides a mock function with given fields: ctx, _a1, meta, userid
func (_m *CourseRepository) GetCompletedCourseByUserID(ctx context.Context, _a1 *sqlx.DB, meta *pagination.Meta, userid string) ([]*db.Course, uint64, error) {
	ret := _m.Called(ctx, _a1, meta, userid)

	var r0 []*db.Course
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *pagination.Meta, string) []*db.Course); ok {
		r0 = rf(ctx, _a1, meta, userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Course)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, *pagination.Meta, string) uint64); ok {
		r1 = rf(ctx, _a1, meta, userid)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *sqlx.DB, *pagination.Meta, string) error); ok {
		r2 = rf(ctx, _a1, meta, userid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCourseByCreatorID provides a mock function with given fields: ctx, _a1, creatorId
func (_m *CourseRepository) GetCourseByCreatorID(ctx context.Context, _a1 *sqlx.DB, creatorId string) ([]*db.Course, error) {
	ret := _m.Called(ctx, _a1, creatorId)

	var r0 []*db.Course
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string) []*db.Course); ok {
		r0 = rf(ctx, _a1, creatorId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Course)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, string) error); ok {
		r1 = rf(ctx, _a1, creatorId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourseById provides a mock function with given fields: ctx, _a1, id
func (_m *CourseRepository) GetCourseById(ctx context.Context, _a1 *sqlx.DB, id string) (*db.Course, error) {
	ret := _m.Called(ctx, _a1, id)

	var r0 *db.Course
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string) *db.Course); ok {
		r0 = rf(ctx, _a1, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Course)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, string) error); ok {
		r1 = rf(ctx, _a1, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourseIDByMaterialID provides a mock function with given fields: ctx, _a1, materialID
func (_m *CourseRepository) GetCourseIDByMaterialID(ctx context.Context, _a1 *sqlx.DB, materialID string) (string, error) {
	ret := _m.Called(ctx, _a1, materialID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string) string); ok {
		r0 = rf(ctx, _a1, materialID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, string) error); ok {
		r1 = rf(ctx, _a1, materialID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourseList provides a mock function with given fields: ctx, _a1, meta
func (_m *CourseRepository) GetCourseList(ctx context.Context, _a1 *sqlx.DB, meta *pagination.Meta) ([]*db.Course, uint64, error) {
	ret := _m.Called(ctx, _a1, meta)

	var r0 []*db.Course
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *pagination.Meta) []*db.Course); ok {
		r0 = rf(ctx, _a1, meta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Course)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, *pagination.Meta) uint64); ok {
		r1 = rf(ctx, _a1, meta)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *sqlx.DB, *pagination.Meta) error); ok {
		r2 = rf(ctx, _a1, meta)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCourseMaterialByCourseIDAndSectionID provides a mock function with given fields: ctx, _a1, courseId, sectionId
func (_m *CourseRepository) GetCourseMaterialByCourseIDAndSectionID(ctx context.Context, _a1 *sqlx.DB, courseId string, sectionId string) ([]*db.Material, error) {
	ret := _m.Called(ctx, _a1, courseId, sectionId)

	var r0 []*db.Material
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string, string) []*db.Material); ok {
		r0 = rf(ctx, _a1, courseId, sectionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Material)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, string, string) error); ok {
		r1 = rf(ctx, _a1, courseId, sectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourseSyllabusByCourseID provides a mock function with given fields: ctx, _a1, courseId
func (_m *CourseRepository) GetCourseSyllabusByCourseID(ctx context.Context, _a1 *sqlx.DB, courseId string) ([]*db.Syllabus, error) {
	ret := _m.Called(ctx, _a1, courseId)

	var r0 []*db.Syllabus
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string) []*db.Syllabus); ok {
		r0 = rf(ctx, _a1, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Syllabus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, string) error); ok {
		r1 = rf(ctx, _a1, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaterialByID provides a mock function with given fields: ctx, _a1, id
func (_m *CourseRepository) GetMaterialByID(ctx context.Context, _a1 *sqlx.DB, id string) (*db.Material, error) {
	ret := _m.Called(ctx, _a1, id)

	var r0 *db.Material
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string) *db.Material); ok {
		r0 = rf(ctx, _a1, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Material)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, string) error); ok {
		r1 = rf(ctx, _a1, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOnProgressCourseByUserID provides a mock function with given fields: ctx, _a1, meta, userid
func (_m *CourseRepository) GetOnProgressCourseByUserID(ctx context.Context, _a1 *sqlx.DB, meta *pagination.Meta, userid string) ([]*db.Course, uint64, error) {
	ret := _m.Called(ctx, _a1, meta, userid)

	var r0 []*db.Course
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *pagination.Meta, string) []*db.Course); ok {
		r0 = rf(ctx, _a1, meta, userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Course)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, *pagination.Meta, string) uint64); ok {
		r1 = rf(ctx, _a1, meta, userid)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *sqlx.DB, *pagination.Meta, string) error); ok {
		r2 = rf(ctx, _a1, meta, userid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTableName provides a mock function with given fields:
func (_m *CourseRepository) GetTableName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUserProgress provides a mock function with given fields: ctx, _a1, userID, courseID
func (_m *CourseRepository) GetUserProgress(ctx context.Context, _a1 *sqlx.DB, userID string, courseID string) ([]*db.UserProgress, error) {
	ret := _m.Called(ctx, _a1, userID, courseID)

	var r0 []*db.UserProgress
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string, string) []*db.UserProgress); ok {
		r0 = rf(ctx, _a1, userID, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.UserProgress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, string, string) error); ok {
		r1 = rf(ctx, _a1, userID, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCourse provides a mock function with given fields: ctx, _a1, course
func (_m *CourseRepository) InsertCourse(ctx context.Context, _a1 *sqlx.DB, course *models.CourseCreation) error {
	ret := _m.Called(ctx, _a1, course)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *models.CourseCreation) error); ok {
		r0 = rf(ctx, _a1, course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertCourseData provides a mock function with given fields: ctx, _a1, course
func (_m *CourseRepository) InsertCourseData(ctx context.Context, _a1 *sqlx.DB, course *db.Course) error {
	ret := _m.Called(ctx, _a1, course)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *db.Course) error); ok {
		r0 = rf(ctx, _a1, course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertCourseMaterial provides a mock function with given fields: ctx, _a1, course
func (_m *CourseRepository) InsertCourseMaterial(ctx context.Context, _a1 *sqlx.DB, course *db.Material) error {
	ret := _m.Called(ctx, _a1, course)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *db.Material) error); ok {
		r0 = rf(ctx, _a1, course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertEnrollment provides a mock function with given fields: ctx, _a1, values
func (_m *CourseRepository) InsertEnrollment(ctx context.Context, _a1 *sqlx.DB, values *models.EnrollInput) error {
	ret := _m.Called(ctx, _a1, values)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *models.EnrollInput) error); ok {
		r0 = rf(ctx, _a1, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsUserEnrolledToCourse provides a mock function with given fields: ctx, _a1, userid, courseid
func (_m *CourseRepository) IsUserEnrolledToCourse(ctx context.Context, _a1 *sqlx.DB, userid string, courseid string) (bool, error) {
	ret := _m.Called(ctx, _a1, userid, courseid)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string, string) bool); ok {
		r0 = rf(ctx, _a1, userid, courseid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, string, string) error); ok {
		r1 = rf(ctx, _a1, userid, courseid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreUserProgress provides a mock function with given fields: ctx, _a1, materialID, courseID, userID, score
func (_m *CourseRepository) StoreUserProgress(ctx context.Context, _a1 *sqlx.DB, materialID string, courseID string, userID string, score int) error {
	ret := _m.Called(ctx, _a1, materialID, courseID, userID, score)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string, string, string, int) error); ok {
		r0 = rf(ctx, _a1, materialID, courseID, userID, score)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
