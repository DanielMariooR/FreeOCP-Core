// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import db "gitlab.informatika.org/andrc1613/if3250_2022_08_freeocp/models/db"
import mock "github.com/stretchr/testify/mock"
import models "gitlab.informatika.org/andrc1613/if3250_2022_08_freeocp/models"

import sqlx "github.com/jmoiron/sqlx"

// ProblemRepository is an autogenerated mock type for the ProblemRepository type
type ProblemRepository struct {
	mock.Mock
}

// GetCandidateById provides a mock function with given fields: ctx, _a1, id
func (_m *ProblemRepository) GetCandidateById(ctx context.Context, _a1 *sqlx.DB, id string) (*db.ProblemCandidate, error) {
	ret := _m.Called(ctx, _a1, id)

	var r0 *db.ProblemCandidate
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string) *db.ProblemCandidate); ok {
		r0 = rf(ctx, _a1, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.ProblemCandidate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, string) error); ok {
		r1 = rf(ctx, _a1, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandidateProblemList provides a mock function with given fields: ctx, _a1, filter
func (_m *ProblemRepository) GetCandidateProblemList(ctx context.Context, _a1 *sqlx.DB, filter models.ProblemFilter) ([]*db.ProblemCandidate, error) {
	ret := _m.Called(ctx, _a1, filter)

	var r0 []*db.ProblemCandidate
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, models.ProblemFilter) []*db.ProblemCandidate); ok {
		r0 = rf(ctx, _a1, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.ProblemCandidate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, models.ProblemFilter) error); ok {
		r1 = rf(ctx, _a1, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailById provides a mock function with given fields: ctx, _a1, id
func (_m *ProblemRepository) GetDetailById(ctx context.Context, _a1 *sqlx.DB, id string) (*db.ProblemDetail, error) {
	ret := _m.Called(ctx, _a1, id)

	var r0 *db.ProblemDetail
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string) *db.ProblemDetail); ok {
		r0 = rf(ctx, _a1, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.ProblemDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, string) error); ok {
		r1 = rf(ctx, _a1, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailTableName provides a mock function with given fields:
func (_m *ProblemRepository) GetDetailTableName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetProblemList provides a mock function with given fields: ctx, _a1, filter
func (_m *ProblemRepository) GetProblemList(ctx context.Context, _a1 *sqlx.DB, filter models.ProblemFilter) ([]*db.ProblemCandidate, error) {
	ret := _m.Called(ctx, _a1, filter)

	var r0 []*db.ProblemCandidate
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, models.ProblemFilter) []*db.ProblemCandidate); ok {
		r0 = rf(ctx, _a1, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.ProblemCandidate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, models.ProblemFilter) error); ok {
		r1 = rf(ctx, _a1, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProblemsByUserId provides a mock function with given fields: ctx, _a1, userId
func (_m *ProblemRepository) GetProblemsByUserId(ctx context.Context, _a1 *sqlx.DB, userId string) ([]*db.ProblemCandidate, error) {
	ret := _m.Called(ctx, _a1, userId)

	var r0 []*db.ProblemCandidate
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string) []*db.ProblemCandidate); ok {
		r0 = rf(ctx, _a1, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.ProblemCandidate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, string) error); ok {
		r1 = rf(ctx, _a1, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTableName provides a mock function with given fields:
func (_m *ProblemRepository) GetTableName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InsertNewProblem provides a mock function with given fields: ctx, _a1, values
func (_m *ProblemRepository) InsertNewProblem(ctx context.Context, _a1 *sqlx.DB, values *db.ProblemCandidate) error {
	ret := _m.Called(ctx, _a1, values)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *db.ProblemCandidate) error); ok {
		r0 = rf(ctx, _a1, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertNewProblemDetail provides a mock function with given fields: ctx, _a1, values
func (_m *ProblemRepository) InsertNewProblemDetail(ctx context.Context, _a1 *sqlx.DB, values *db.ProblemDetail) error {
	ret := _m.Called(ctx, _a1, values)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *db.ProblemDetail) error); ok {
		r0 = rf(ctx, _a1, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProblemStatus provides a mock function with given fields: ctx, _a1, input
func (_m *ProblemRepository) UpdateProblemStatus(ctx context.Context, _a1 *sqlx.DB, input *models.ProblemStatusUpdate) error {
	ret := _m.Called(ctx, _a1, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *models.ProblemStatusUpdate) error); ok {
		r0 = rf(ctx, _a1, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
