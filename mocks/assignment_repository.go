// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import db "gitlab.informatika.org/andrc1613/if3250_2022_08_freeocp/models/db"
import mock "github.com/stretchr/testify/mock"
import sqlx "github.com/jmoiron/sqlx"

// AssignmentRepository is an autogenerated mock type for the AssignmentRepository type
type AssignmentRepository struct {
	mock.Mock
}

// GetAssignmentById provides a mock function with given fields: ctx, _a1, id
func (_m *AssignmentRepository) GetAssignmentById(ctx context.Context, _a1 *sqlx.DB, id string) (*db.Assignment, error) {
	ret := _m.Called(ctx, _a1, id)

	var r0 *db.Assignment
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string) *db.Assignment); ok {
		r0 = rf(ctx, _a1, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Assignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, string) error); ok {
		r1 = rf(ctx, _a1, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssignmentProblemsById provides a mock function with given fields: ctx, _a1, id
func (_m *AssignmentRepository) GetAssignmentProblemsById(ctx context.Context, _a1 *sqlx.DB, id string) ([]*db.ProblemTypeDetail, error) {
	ret := _m.Called(ctx, _a1, id)

	var r0 []*db.ProblemTypeDetail
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, string) []*db.ProblemTypeDetail); ok {
		r0 = rf(ctx, _a1, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.ProblemTypeDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, string) error); ok {
		r1 = rf(ctx, _a1, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProblemTableName provides a mock function with given fields:
func (_m *AssignmentRepository) GetProblemTableName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTableName provides a mock function with given fields:
func (_m *AssignmentRepository) GetTableName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InsertAssignment provides a mock function with given fields: ctx, _a1, value
func (_m *AssignmentRepository) InsertAssignment(ctx context.Context, _a1 *sqlx.DB, value *db.AssignmentCreation) error {
	ret := _m.Called(ctx, _a1, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *db.AssignmentCreation) error); ok {
		r0 = rf(ctx, _a1, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAssignmentDesc provides a mock function with given fields: ctx, _a1, value
func (_m *AssignmentRepository) InsertAssignmentDesc(ctx context.Context, _a1 *sqlx.DB, value *db.Assignment) error {
	ret := _m.Called(ctx, _a1, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *db.Assignment) error); ok {
		r0 = rf(ctx, _a1, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAssignmentProblem provides a mock function with given fields: ctx, _a1, values
func (_m *AssignmentRepository) InsertAssignmentProblem(ctx context.Context, _a1 *sqlx.DB, values *[]db.AssignmentProblem) error {
	ret := _m.Called(ctx, _a1, values)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, *[]db.AssignmentProblem) error); ok {
		r0 = rf(ctx, _a1, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
